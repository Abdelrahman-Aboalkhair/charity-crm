generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
}

enum GENDER {
  MALE
  FEMALE
}

enum DONATION_STATUS {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                          String        @id @default(uuid())
  name                        String
  email                       String        @unique
  role                        ROLE
  avatar                      String?
  password                    String?
  resetPasswordToken          String?
  resetPasswordTokenExpiresAt DateTime?
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  calls                       Call[]
  reservations                Reservation[]
  donations                   Donation[]
}

model Donor {
  id                 String    @id @default(uuid())
  name               String
  gender             GENDER
  phone_number1      String?
  phone_number2      String?
  dob                DateTime?
  email              String?   @unique
  job_title          String?
  province           String?
  city               String?
  area               String?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  location_id        String?
  calls              Call[]
  reservations       Reservation[]
  donations          Donation[]
}

model Donation {
  id                 String          @id @default(uuid())
  donor_id           String
  donor              Donor           @relation(fields: [donor_id], references: [id])
  location_id        String?
  created_by_user_id String?
  created_by_user    User?           @relation(fields: [created_by_user_id], references: [id])
  date               DateTime
  status             DONATION_STATUS @default(PENDING)
  notes              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Call {
  id                String       @id @default(uuid())
  donor_id          String
  donor             Donor        @relation(fields: [donor_id], references: [id])
  called_by_user_id String
  called_by_user    User         @relation(fields: [called_by_user_id], references: [id])
  call_date         DateTime
  outcome           String
  notes             String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Reservation {
  id                  String   @id @default(uuid())
  donor_id            String
  donor               Donor    @relation(fields: [donor_id], references: [id])
  reserved_by_user_id String
  reserved_by_user    User     @relation(fields: [reserved_by_user_id], references: [id])
  expires_at          DateTime
  status              String   @default("ACTIVE")
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Location {
  id        String   @id @default(uuid())
  type      String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
